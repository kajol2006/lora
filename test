import spidev
import time
import RPi.GPIO as GPIO

# Define GPIO pins for NSS (CS), RESET, DIO0 (interrupt)
NSS_PIN = 8   # GPIO pin for NSS (Chip Select)
RESET_PIN = 25
DIO0_PIN = 24

# SX1262 SPI commands (examples)
SX1262_READ_REGISTER = 0x1D
SX1262_WRITE_REGISTER = 0x0D

class SX1262:
    def __init__(self, bus=0, device=0):
        self.spi = spidev.SpiDev()
        self.spi.open(bus, device)
        self.spi.max_speed_hz = 1000000  # 1 MHz, can be increased based on hardware
        self.spi.mode = 0b00
        
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(NSS_PIN, GPIO.OUT)
        GPIO.setup(RESET_PIN, GPIO.OUT)
        GPIO.setup(DIO0_PIN, GPIO.IN)
        
        GPIO.output(NSS_PIN, GPIO.HIGH)
        
        self.reset()

    def reset(self):
        GPIO.output(RESET_PIN, GPIO.LOW)
        time.sleep(0.01)
        GPIO.output(RESET_PIN, GPIO.HIGH)
        time.sleep(0.01)
        print("SX1262 Reset")

    def spi_write(self, buf):
        GPIO.output(NSS_PIN, GPIO.LOW)
        self.spi.xfer2(buf)
        GPIO.output(NSS_PIN, GPIO.HIGH)

    def spi_read(self, length):
        GPIO.output(NSS_PIN, GPIO.LOW)
        result = self.spi.readbytes(length)
        GPIO.output(NSS_PIN, GPIO.HIGH)
        return result

    def write_register(self, address, data):
        # Write register command format: [WRITE_COMMAND, addr (MSB), addr(LSB), data ...]
        addr_msb = (address >> 8) & 0xFF
        addr_lsb = address & 0xFF
        buf = [SX1262_WRITE_REGISTER, addr_msb, addr_lsb] + data
        self.spi_write(buf)

    def read_register(self, address, length):
        addr_msb = (address >> 8) & 0xFF
        addr_lsb = address & 0xFF
        # Read command format: [READ_COMMAND, addr MSB, addr LSB, dummy byte]
        GPIO.output(NSS_PIN, GPIO.LOW)
        self.spi.xfer2([SX1262_READ_REGISTER, addr_msb, addr_lsb, 0x00])
        response = self.spi.readbytes(length)
        GPIO.output(NSS_PIN, GPIO.HIGH)
        return response

    def close(self):
        self.spi.close()
        GPIO.cleanup()

if __name__ == "__main__":
    sx1262 = SX1262()

    try:
        # Example: read version register at address 0x0100 (replace with correct address)
        version_addr = 0x0100
        version = sx1262.read_register(version_addr, 1)
        print(f"SX1262 Version: 0x{version[0]:02X}")

        # Example: write to some control register (address and data to be adjusted as per datasheet)
        # sx1262.write_register(0x01, [0x80])

        # Extend here with LoRa initialization and data transmission routines...

    except Exception as e:
        print(f"Error: {e}")
    finally:
        sx1262.close()
